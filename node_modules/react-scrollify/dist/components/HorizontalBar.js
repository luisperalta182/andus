'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _helpers = require('../helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HorizontalBar = function (_React$Component) {
    (0, _inherits3.default)(HorizontalBar, _React$Component);

    function HorizontalBar(props) {
        (0, _classCallCheck3.default)(this, HorizontalBar);

        var _this = (0, _possibleConstructorReturn3.default)(this, (HorizontalBar.__proto__ || (0, _getPrototypeOf2.default)(HorizontalBar)).call(this, props));

        _this.handleOnFocus = _this.handleOnFocus.bind(_this);
        _this.handleOnBlur = _this.handleOnBlur.bind(_this);
        _this.handleOnMouseDown = _this.handleOnMouseDown.bind(_this);;
        _this.handleOnMouseMove = _this.handleOnMouseMove.bind(_this);
        _this.handleOnMouseUp = _this.handleOnMouseUp.bind(_this);
        _this.updateScrollAndGeometry = _this.updateScrollAndGeometry.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(HorizontalBar, [{
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(props, state) {
            var _props = this.props,
                horizontalBarDragging = _props.horizontalBarDragging,
                ownerDocument = _props.ownerDocument;


            if (horizontalBarDragging) {
                ownerDocument.addEventListener('mousemove', this.handleOnMouseMove);
                ownerDocument.addEventListener('mouseup', this.handleOnMouseUp);
            } else if (!horizontalBarDragging) {
                ownerDocument.removeEventListener('mousemove', this.handleOnMouseMove);
                ownerDocument.removeEventListener('mouseup', this.handleOnMouseUp);
            }
        }
    }, {
        key: 'handleOnFocus',
        value: function handleOnFocus(e) {
            e.target.classList.add('ps--focus');
        }
    }, {
        key: 'handleOnBlur',
        value: function handleOnBlur(e) {
            e.target.classList.remove('ps--focus');
        }
    }, {
        key: 'handleOnMouseUp',
        value: function handleOnMouseUp(e) {
            this.props.setContainerState({
                horizontalBarDragging: false
            });
            e.stopPropagation();
            e.preventDefault();
        }
    }, {
        key: 'handleOnMouseDown',
        value: function handleOnMouseDown(e) {
            var currentPageX = e.pageX;
            var currentLeft = _helpers2.default.toInt(_reactDom2.default.findDOMNode(this).style.left) * this.props.horizontalRailRatio;

            this.props.setContainerState({
                horizontalBarDragging: true,
                currentPageX: currentPageX,
                currentLeft: currentLeft
            });

            e.stopPropagation();
            e.preventDefault();
        }
    }, {
        key: 'handleOnMouseMove',
        value: function handleOnMouseMove(e) {
            this.updateScrollAndGeometry(e.pageX - this.props.currentPageX);
        }
    }, {
        key: 'updateScrollAndGeometry',
        value: function updateScrollAndGeometry(deltaX) {
            var _props2 = this.props,
                currentLeft = _props2.currentLeft,
                horizontalRailRatio = _props2.horizontalRailRatio,
                horizontalRailWidth = _props2.horizontalRailWidth,
                horizontalBarWidth = _props2.horizontalBarWidth,
                horizontalBarLeft = _props2.horizontalBarLeft,
                contentWidth = _props2.contentWidth,
                containerWidth = _props2.containerWidth,
                negativeScrollAdjustment = _props2.negativeScrollAdjustment;


            var newLeft = currentLeft + deltaX * horizontalRailRatio;
            var maxLeft = Math.max(0, _reactDom2.default.findDOMNode(this).parentNode.getBoundingClientRect().left) + horizontalRailRatio * (horizontalRailWidth - horizontalBarWidth);

            var scrollbarXLeft = void 0,
                scrollLeft = void 0;

            if (newLeft < 0) {
                scrollbarXLeft = 0;
            } else if (newLeft > maxLeft) {
                scrollbarXLeft = maxLeft;
            } else {
                scrollbarXLeft = newLeft;
            }

            scrollLeft = _helpers2.default.toInt(scrollbarXLeft * (contentWidth - containerWidth) / (containerWidth - horizontalRailRatio * horizontalBarWidth)) - negativeScrollAdjustment;

            this.props.updateContainerScroll('left', scrollLeft);
            this.props.updateGeometry();
            this.props.updateState();
        }
    }, {
        key: 'render',
        value: function render() {
            var style = {
                width: this.props.horizontalBarWidth + 'px',
                left: this.props.horizontalBarLeft + 'px'
            };

            return _react2.default.createElement('div', {
                ref: 'xbar',
                className: 'ps-scrollbar-x',
                tabIndex: '0',
                style: style,
                onFocus: this.handleOnFocus,
                onBlur: this.handleOnBlur,
                onMouseDown: this.handleOnMouseDown
            });
        }
    }]);
    return HorizontalBar;
}(_react2.default.Component);

exports.default = HorizontalBar;