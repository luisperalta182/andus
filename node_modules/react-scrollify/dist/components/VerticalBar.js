'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _helpers = require('../helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VerticalBar = function (_React$Component) {
    (0, _inherits3.default)(VerticalBar, _React$Component);

    function VerticalBar(props) {
        (0, _classCallCheck3.default)(this, VerticalBar);

        var _this = (0, _possibleConstructorReturn3.default)(this, (VerticalBar.__proto__ || (0, _getPrototypeOf2.default)(VerticalBar)).call(this, props));

        _this.handleOnFocus = _this.handleOnFocus.bind(_this);
        _this.handleOnBlur = _this.handleOnBlur.bind(_this);
        _this.handleOnMouseDown = _this.handleOnMouseDown.bind(_this);;
        _this.handleOnMouseMove = _this.handleOnMouseMove.bind(_this);
        _this.handleOnMouseUp = _this.handleOnMouseUp.bind(_this);
        _this.updateScrollAndGeometry = _this.updateScrollAndGeometry.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(VerticalBar, [{
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(props, state) {
            var _props = this.props,
                verticalBarDragging = _props.verticalBarDragging,
                ownerDocument = _props.ownerDocument;


            if (verticalBarDragging) {
                ownerDocument.addEventListener('mousemove', this.handleOnMouseMove);
                ownerDocument.addEventListener('mouseup', this.handleOnMouseUp);
            } else if (!verticalBarDragging) {
                ownerDocument.removeEventListener('mousemove', this.handleOnMouseMove);
                ownerDocument.removeEventListener('mouseup', this.handleOnMouseUp);
            }
        }
    }, {
        key: 'handleOnFocus',
        value: function handleOnFocus(e) {
            e.target.classList.add('ps--focus');
        }
    }, {
        key: 'handleOnBlur',
        value: function handleOnBlur(e) {
            e.target.classList.remove('ps--focus');
        }
    }, {
        key: 'handleOnMouseUp',
        value: function handleOnMouseUp(e) {
            this.props.setContainerState({
                verticalBarDragging: false
            });
            e.stopPropagation();
            e.preventDefault();
        }
    }, {
        key: 'handleOnMouseDown',
        value: function handleOnMouseDown(e) {
            var currentPageY = e.pageY;
            var currentTop = _helpers2.default.toInt(_reactDom2.default.findDOMNode(this).style.top) * this.props.verticalRailRatio;

            this.props.setContainerState({
                verticalBarDragging: true,
                currentPageY: currentPageY,
                currentTop: currentTop
            });

            e.stopPropagation();
            e.preventDefault();
        }
    }, {
        key: 'handleOnMouseMove',
        value: function handleOnMouseMove(e) {
            this.updateScrollAndGeometry(e.pageY - this.props.currentPageY);
        }
    }, {
        key: 'updateScrollAndGeometry',
        value: function updateScrollAndGeometry(deltaY) {
            var _props2 = this.props,
                currentTop = _props2.currentTop,
                verticalRailRatio = _props2.verticalRailRatio,
                verticalRailHeight = _props2.verticalRailHeight,
                verticalBarHeight = _props2.verticalBarHeight,
                verticalBarTop = _props2.verticalBarTop,
                contentHeight = _props2.contentHeight,
                containerHeight = _props2.containerHeight,
                negativeScrollAdjustment = _props2.negativeScrollAdjustment;


            var newTop = currentTop + deltaY * verticalRailRatio;
            var maxTop = Math.max(0, _reactDom2.default.findDOMNode(this).parentNode.getBoundingClientRect().top) + verticalRailRatio * (verticalRailHeight - verticalBarHeight);

            var scrollbarYTop = void 0,
                scrollTop = void 0;

            if (newTop < 0) {
                scrollbarYTop = 0;
            } else if (newTop > maxTop) {
                scrollbarYTop = maxTop;
            } else {
                scrollbarYTop = newTop;
            }

            scrollTop = _helpers2.default.toInt(scrollbarYTop * (contentHeight - containerHeight) / (containerHeight - verticalRailRatio * verticalBarHeight));

            this.props.updateContainerScroll('top', scrollTop);
            this.props.updateGeometry();
            this.props.updateState();
        }
    }, {
        key: 'render',
        value: function render() {
            var style = {
                height: this.props.verticalBarHeight + 'px',
                top: this.props.verticalBarTop + 'px'
            };

            return _react2.default.createElement('div', {
                ref: 'ybar',
                className: 'ps-scrollbar-y',
                tabIndex: '0',
                style: style,
                onFocus: this.handleOnFocus,
                onBlur: this.handleOnBlur,
                onMouseDown: this.handleOnMouseDown
            });
        }
    }]);
    return VerticalBar;
}(_react2.default.Component);

exports.default = VerticalBar;