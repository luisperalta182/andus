{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["find","includes","get","hasIn","compact","uniq","addQueryArgs","controls","apiFetch","regularFetch","STORE_NAME","receiveUserQuery","receiveCurrentTheme","receiveCurrentUser","receiveEntityRecords","receiveThemeSupports","receiveEmbedPreview","receiveUserPermission","receiveAutosaves","getKindEntities","DEFAULT_ENTITY_KEY","ifNotResolved","getNormalizedCommaSeparable","__unstableAcquireStoreLock","__unstableReleaseStoreLock","getAuthors","query","path","users","getCurrentUser","currentUser","getEntityRecord","kind","name","key","entities","entity","lock","exclusive","undefined","_fields","join","baseURL","baseURLParams","include","hasRecords","select","record","error","getRawEntityRecord","getEditedEntityRecord","getEntityRecords","records","Object","values","map","split","forEach","field","hasOwnProperty","context","resolutionsArgs","filter","type","selectorName","args","shouldInvalidate","action","invalidateCache","getCurrentTheme","activeThemes","getThemeSupports","theme_supports","getEmbedPreview","url","embedProxyResponse","canUser","resource","id","methods","create","read","update","delete","method","Error","response","parse","allowHeader","headers","isAllowed","canUserEditEntityRecord","recordId","__unstable_rest_base","getAutosaves","postType","postId","rest_base","restBase","resolveSelect","autosaves","length","getAutosave","__experimentalGetTemplateForLink","link","template","e"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport { controls } from '@wordpress/data';\nimport { apiFetch } from '@wordpress/data-controls';\n/**\n * Internal dependencies\n */\nimport { regularFetch } from './controls';\nimport { STORE_NAME } from './name';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { ifNotResolved, getNormalizedCommaSeparable } from './utils';\nimport {\n\t__unstableAcquireStoreLock,\n\t__unstableReleaseStoreLock,\n} from './locks';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getAuthors( query ) {\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\tconst users = yield apiFetch( { path } );\n\tyield receiveUserQuery( path, users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getEntityRecord( kind, name, key = '', query ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, key ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query !== undefined && query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\t// Disable reason: While true that an early return could leave `path`\n\t\t// unused, it's important that path is derived using the query prior to\n\t\t// additional query modifications in the condition below, since those\n\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t// for how the request is made to the REST API.\n\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst path = addQueryArgs( entity.baseURL + '/' + key, {\n\t\t\t...entity.baseURLParams,\n\t\t\t...query,\n\t\t} );\n\n\t\tif ( query !== undefined ) {\n\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\tconst hasRecords = yield controls.select(\n\t\t\t\tSTORE_NAME,\n\t\t\t\t'hasEntityRecords',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\tquery\n\t\t\t);\n\t\t\tif ( hasRecords ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst record = yield apiFetch( { path } );\n\t\tyield receiveEntityRecords( kind, name, record, query );\n\t} catch ( error ) {\n\t\t// We need a way to handle and access REST API errors in state\n\t\t// Until then, catching the error ensures the resolver is marked as resolved.\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\tconst path = addQueryArgs( entity.baseURL, {\n\t\t\t...entity.baseURLParams,\n\t\t\t...query,\n\t\t} );\n\n\t\tlet records = Object.values( yield apiFetch( { path } ) );\n\t\t// If we request fields but the result doesn't contain the fields,\n\t\t// explicitely set these fields as \"undefined\"\n\t\t// that way we consider the query \"fullfilled\".\n\t\tif ( query._fields ) {\n\t\t\trecords = records.map( ( record ) => {\n\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn record;\n\t\t\t} );\n\t\t}\n\n\t\tyield receiveEntityRecords( kind, name, records, query );\n\t\t// When requesting all fields, the list of results can be used to\n\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\tconst key = entity.key || DEFAULT_ENTITY_KEY;\n\t\t\tconst resolutionsArgs = records\n\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\tyield {\n\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\targs: resolutionsArgs,\n\t\t\t};\n\t\t\tyield {\n\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\targs: resolutionsArgs,\n\t\t\t};\n\t\t}\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport function* canUserEditEntityRecord( kind, name, recordId ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst resource = entity.__unstable_rest_base;\n\tyield canUser( 'update', resource, recordId );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield controls.resolveSelect(\n\t\tSTORE_NAME,\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield controls.resolveSelect(\n\t\tSTORE_NAME,\n\t\t'getAutosaves',\n\t\tpostType,\n\t\tpostId\n\t);\n}\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport function* __experimentalGetTemplateForLink( link ) {\n\t// Ideally this should be using an apiFetch call\n\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t// Also it seems the returned object is not a regular REST API post type.\n\tlet template;\n\ttry {\n\t\ttemplate = yield regularFetch(\n\t\t\taddQueryArgs( link, {\n\t\t\t\t'_wp-find-template': true,\n\t\t\t} )\n\t\t);\n\t} catch ( e ) {\n\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t}\n\n\tif ( ! template ) {\n\t\treturn;\n\t}\n\n\tyield getEntityRecord( 'postType', 'wp_template', template.id );\n\tconst record = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getEntityRecord',\n\t\t'postType',\n\t\t'wp_template',\n\t\ttemplate.id\n\t);\n\n\tif ( record ) {\n\t\tyield receiveEntityRecords( 'postType', 'wp_template', [ record ], {\n\t\t\t'find-template': link,\n\t\t} );\n\t}\n}\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n"]}