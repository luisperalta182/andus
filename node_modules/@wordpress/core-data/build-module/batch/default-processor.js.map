{"version":3,"sources":["@wordpress/core-data/src/batch/default-processor.js"],"names":["apiFetch","defaultProcessor","requests","batchResponse","path","method","data","validation","map","request","body","headers","failed","responses","response","error","result","status","output"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,sBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,eAAeC,gBAAf,CAAiCC,QAAjC,EAA4C;AAC1D,QAAMC,aAAa,GAAG,MAAMH,QAAQ,CAAE;AACrCI,IAAAA,IAAI,EAAE,WAD+B;AAErCC,IAAAA,MAAM,EAAE,MAF6B;AAGrCC,IAAAA,IAAI,EAAE;AACLC,MAAAA,UAAU,EAAE,sBADP;AAELL,MAAAA,QAAQ,EAAEA,QAAQ,CAACM,GAAT,CAAgBC,OAAF,KAAiB;AACxCL,QAAAA,IAAI,EAAEK,OAAO,CAACL,IAD0B;AAExCM,QAAAA,IAAI,EAAED,OAAO,CAACH,IAF0B;AAEpB;AACpBD,QAAAA,MAAM,EAAEI,OAAO,CAACJ,MAHwB;AAIxCM,QAAAA,OAAO,EAAEF,OAAO,CAACE;AAJuB,OAAjB,CAAd;AAFL;AAH+B,GAAF,CAApC;;AAcA,MAAKR,aAAa,CAACS,MAAnB,EAA4B;AAC3B,WAAOT,aAAa,CAACU,SAAd,CAAwBL,GAAxB,CAA+BM,QAAF,KAAkB;AACrDC,MAAAA,KAAK,EAAED,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEJ;AADoC,KAAlB,CAA7B,CAAP;AAGA;;AAED,SAAOP,aAAa,CAACU,SAAd,CAAwBL,GAAxB,CAA+BM,QAAF,IAAgB;AACnD,UAAME,MAAM,GAAG,EAAf;;AACA,QAAKF,QAAQ,CAACG,MAAT,IAAmB,GAAnB,IAA0BH,QAAQ,CAACG,MAAT,GAAkB,GAAjD,EAAuD;AACtDD,MAAAA,MAAM,CAACE,MAAP,GAAgBJ,QAAQ,CAACJ,IAAzB;AACA,KAFD,MAEO;AACNM,MAAAA,MAAM,CAACD,KAAP,GAAeD,QAAQ,CAACJ,IAAxB;AACA;;AACD,WAAOM,MAAP;AACA,GARM,CAAP;AASA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Default batch processor. Sends its input requests to /v1/batch.\n *\n * @param {Array} requests List of API requests to perform at once.\n *\n * @return {Promise} Promise that resolves to a list of objects containing\n *                   either `output` (if that request was succesful) or `error`\n *                   (if not ).\n */\nexport default async function defaultProcessor( requests ) {\n\tconst batchResponse = await apiFetch( {\n\t\tpath: '/batch/v1',\n\t\tmethod: 'POST',\n\t\tdata: {\n\t\t\tvalidation: 'require-all-validate',\n\t\t\trequests: requests.map( ( request ) => ( {\n\t\t\t\tpath: request.path,\n\t\t\t\tbody: request.data, // Rename 'data' to 'body'.\n\t\t\t\tmethod: request.method,\n\t\t\t\theaders: request.headers,\n\t\t\t} ) ),\n\t\t},\n\t} );\n\n\tif ( batchResponse.failed ) {\n\t\treturn batchResponse.responses.map( ( response ) => ( {\n\t\t\terror: response?.body,\n\t\t} ) );\n\t}\n\n\treturn batchResponse.responses.map( ( response ) => {\n\t\tconst result = {};\n\t\tif ( response.status >= 200 && response.status < 300 ) {\n\t\t\tresult.output = response.body;\n\t\t} else {\n\t\t\tresult.error = response.body;\n\t\t}\n\t\treturn result;\n\t} );\n}\n"]}