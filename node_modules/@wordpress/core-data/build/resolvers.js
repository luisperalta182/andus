"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAuthors = getAuthors;
exports.getCurrentUser = getCurrentUser;
exports.getEntityRecord = getEntityRecord;
exports.getEntityRecords = getEntityRecords;
exports.getCurrentTheme = getCurrentTheme;
exports.getThemeSupports = getThemeSupports;
exports.getEmbedPreview = getEmbedPreview;
exports.canUser = canUser;
exports.canUserEditEntityRecord = canUserEditEntityRecord;
exports.getAutosaves = getAutosaves;
exports.getAutosave = getAutosave;
exports.__experimentalGetTemplateForLink = __experimentalGetTemplateForLink;
exports.getEditedEntityRecord = exports.getRawEntityRecord = void 0;

var _lodash = require("lodash");

var _url = require("@wordpress/url");

var _data = require("@wordpress/data");

var _dataControls = require("@wordpress/data-controls");

var _controls = require("./controls");

var _name = require("./name");

var _actions = require("./actions");

var _entities = require("./entities");

var _utils = require("./utils");

var _locks = require("./locks");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Requests authors from the REST API.
 *
 * @param {Object|undefined} query Optional object of query parameters to
 *                                 include with request.
 */
function* getAuthors(query) {
  const path = (0, _url.addQueryArgs)('/wp/v2/users/?who=authors&per_page=100', query);
  const users = yield (0, _dataControls.apiFetch)({
    path
  });
  yield (0, _actions.receiveUserQuery)(path, users);
}
/**
 * Requests the current user from the REST API.
 */


function* getCurrentUser() {
  const currentUser = yield (0, _dataControls.apiFetch)({
    path: '/wp/v2/users/me'
  });
  yield (0, _actions.receiveCurrentUser)(currentUser);
}
/**
 * Requests an entity's record from the REST API.
 *
 * @param {string}           kind  Entity kind.
 * @param {string}           name  Entity name.
 * @param {number|string}    key   Record's key
 * @param {Object|undefined} query Optional object of query parameters to
 *                                 include with request.
 */


function* getEntityRecord(kind, name, key = '', query) {
  const entities = yield (0, _entities.getKindEntities)(kind);
  const entity = (0, _lodash.find)(entities, {
    kind,
    name
  });

  if (!entity) {
    return;
  }

  const lock = yield* (0, _locks.__unstableAcquireStoreLock)(_name.STORE_NAME, ['entities', 'data', kind, name, key], {
    exclusive: false
  });

  try {
    if (query !== undefined && query._fields) {
      // If requesting specific fields, items and query association to said
      // records are stored by ID reference. Thus, fields must always include
      // the ID.
      query = { ...query,
        _fields: (0, _lodash.uniq)([...((0, _utils.getNormalizedCommaSeparable)(query._fields) || []), entity.key || _entities.DEFAULT_ENTITY_KEY]).join()
      };
    } // Disable reason: While true that an early return could leave `path`
    // unused, it's important that path is derived using the query prior to
    // additional query modifications in the condition below, since those
    // modifications are relevant to how the data is tracked in state, and not
    // for how the request is made to the REST API.
    // eslint-disable-next-line @wordpress/no-unused-vars-before-return


    const path = (0, _url.addQueryArgs)(entity.baseURL + '/' + key, { ...entity.baseURLParams,
      ...query
    });

    if (query !== undefined) {
      query = { ...query,
        include: [key]
      }; // The resolution cache won't consider query as reusable based on the
      // fields, so it's tested here, prior to initiating the REST request,
      // and without causing `getEntityRecords` resolution to occur.

      const hasRecords = yield _data.controls.select(_name.STORE_NAME, 'hasEntityRecords', kind, name, query);

      if (hasRecords) {
        return;
      }
    }

    const record = yield (0, _dataControls.apiFetch)({
      path
    });
    yield (0, _actions.receiveEntityRecords)(kind, name, record, query);
  } catch (error) {// We need a way to handle and access REST API errors in state
    // Until then, catching the error ensures the resolver is marked as resolved.
  } finally {
    yield* (0, _locks.__unstableReleaseStoreLock)(lock);
  }
}
/**
 * Requests an entity's record from the REST API.
 */


const getRawEntityRecord = (0, _utils.ifNotResolved)(getEntityRecord, 'getEntityRecord');
/**
 * Requests an entity's record from the REST API.
 */

exports.getRawEntityRecord = getRawEntityRecord;
const getEditedEntityRecord = (0, _utils.ifNotResolved)(getRawEntityRecord, 'getRawEntityRecord');
/**
 * Requests the entity's records from the REST API.
 *
 * @param {string}  kind  Entity kind.
 * @param {string}  name  Entity name.
 * @param {Object?} query Query Object.
 */

exports.getEditedEntityRecord = getEditedEntityRecord;

function* getEntityRecords(kind, name, query = {}) {
  const entities = yield (0, _entities.getKindEntities)(kind);
  const entity = (0, _lodash.find)(entities, {
    kind,
    name
  });

  if (!entity) {
    return;
  }

  const lock = yield* (0, _locks.__unstableAcquireStoreLock)(_name.STORE_NAME, ['entities', 'data', kind, name], {
    exclusive: false
  });

  try {
    var _query;

    if (query._fields) {
      // If requesting specific fields, items and query association to said
      // records are stored by ID reference. Thus, fields must always include
      // the ID.
      query = { ...query,
        _fields: (0, _lodash.uniq)([...((0, _utils.getNormalizedCommaSeparable)(query._fields) || []), entity.key || _entities.DEFAULT_ENTITY_KEY]).join()
      };
    }

    const path = (0, _url.addQueryArgs)(entity.baseURL, { ...entity.baseURLParams,
      ...query
    });
    let records = Object.values(yield (0, _dataControls.apiFetch)({
      path
    })); // If we request fields but the result doesn't contain the fields,
    // explicitely set these fields as "undefined"
    // that way we consider the query "fullfilled".

    if (query._fields) {
      records = records.map(record => {
        query._fields.split(',').forEach(field => {
          if (!record.hasOwnProperty(field)) {
            record[field] = undefined;
          }
        });

        return record;
      });
    }

    yield (0, _actions.receiveEntityRecords)(kind, name, records, query); // When requesting all fields, the list of results can be used to
    // resolve the `getEntityRecord` selector in addition to `getEntityRecords`.
    // See https://github.com/WordPress/gutenberg/pull/26575

    if (!((_query = query) !== null && _query !== void 0 && _query._fields) && !query.context) {
      const key = entity.key || _entities.DEFAULT_ENTITY_KEY;
      const resolutionsArgs = records.filter(record => record[key]).map(record => [kind, name, record[key]]);
      yield {
        type: 'START_RESOLUTIONS',
        selectorName: 'getEntityRecord',
        args: resolutionsArgs
      };
      yield {
        type: 'FINISH_RESOLUTIONS',
        selectorName: 'getEntityRecord',
        args: resolutionsArgs
      };
    }
  } finally {
    yield* (0, _locks.__unstableReleaseStoreLock)(lock);
  }
}

getEntityRecords.shouldInvalidate = (action, kind, name) => {
  return (action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS') && action.invalidateCache && kind === action.kind && name === action.name;
};
/**
 * Requests the current theme.
 */


function* getCurrentTheme() {
  const activeThemes = yield (0, _dataControls.apiFetch)({
    path: '/wp/v2/themes?status=active'
  });
  yield (0, _actions.receiveCurrentTheme)(activeThemes[0]);
}
/**
 * Requests theme supports data from the index.
 */


function* getThemeSupports() {
  const activeThemes = yield (0, _dataControls.apiFetch)({
    path: '/wp/v2/themes?status=active'
  });
  yield (0, _actions.receiveThemeSupports)(activeThemes[0].theme_supports);
}
/**
 * Requests a preview from the from the Embed API.
 *
 * @param {string} url URL to get the preview for.
 */


function* getEmbedPreview(url) {
  try {
    const embedProxyResponse = yield (0, _dataControls.apiFetch)({
      path: (0, _url.addQueryArgs)('/oembed/1.0/proxy', {
        url
      })
    });
    yield (0, _actions.receiveEmbedPreview)(url, embedProxyResponse);
  } catch (error) {
    // Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.
    yield (0, _actions.receiveEmbedPreview)(url, false);
  }
}
/**
 * Checks whether the current user can perform the given action on the given
 * REST resource.
 *
 * @param {string}  action   Action to check. One of: 'create', 'read', 'update',
 *                           'delete'.
 * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.
 * @param {?string} id       ID of the rest resource to check.
 */


function* canUser(action, resource, id) {
  const methods = {
    create: 'POST',
    read: 'GET',
    update: 'PUT',
    delete: 'DELETE'
  };
  const method = methods[action];

  if (!method) {
    throw new Error(`'${action}' is not a valid action.`);
  }

  const path = id ? `/wp/v2/${resource}/${id}` : `/wp/v2/${resource}`;
  let response;

  try {
    response = yield (0, _dataControls.apiFetch)({
      path,
      // Ideally this would always be an OPTIONS request, but unfortunately there's
      // a bug in the REST API which causes the Allow header to not be sent on
      // OPTIONS requests to /posts/:id routes.
      // https://core.trac.wordpress.org/ticket/45753
      method: id ? 'GET' : 'OPTIONS',
      parse: false
    });
  } catch (error) {
    // Do nothing if our OPTIONS request comes back with an API error (4xx or
    // 5xx). The previously determined isAllowed value will remain in the store.
    return;
  }

  let allowHeader;

  if ((0, _lodash.hasIn)(response, ['headers', 'get'])) {
    // If the request is fetched using the fetch api, the header can be
    // retrieved using the 'get' method.
    allowHeader = response.headers.get('allow');
  } else {
    // If the request was preloaded server-side and is returned by the
    // preloading middleware, the header will be a simple property.
    allowHeader = (0, _lodash.get)(response, ['headers', 'Allow'], '');
  }

  const key = (0, _lodash.compact)([action, resource, id]).join('/');
  const isAllowed = (0, _lodash.includes)(allowHeader, method);
  yield (0, _actions.receiveUserPermission)(key, isAllowed);
}
/**
 * Checks whether the current user can perform the given action on the given
 * REST resource.
 *
 * @param {string} kind     Entity kind.
 * @param {string} name     Entity name.
 * @param {string} recordId Record's id.
 */


function* canUserEditEntityRecord(kind, name, recordId) {
  const entities = yield (0, _entities.getKindEntities)(kind);
  const entity = (0, _lodash.find)(entities, {
    kind,
    name
  });

  if (!entity) {
    return;
  }

  const resource = entity.__unstable_rest_base;
  yield canUser('update', resource, recordId);
}
/**
 * Request autosave data from the REST API.
 *
 * @param {string} postType The type of the parent post.
 * @param {number} postId   The id of the parent post.
 */


function* getAutosaves(postType, postId) {
  const {
    rest_base: restBase
  } = yield _data.controls.resolveSelect(_name.STORE_NAME, 'getPostType', postType);
  const autosaves = yield (0, _dataControls.apiFetch)({
    path: `/wp/v2/${restBase}/${postId}/autosaves?context=edit`
  });

  if (autosaves && autosaves.length) {
    yield (0, _actions.receiveAutosaves)(postId, autosaves);
  }
}
/**
 * Request autosave data from the REST API.
 *
 * This resolver exists to ensure the underlying autosaves are fetched via
 * `getAutosaves` when a call to the `getAutosave` selector is made.
 *
 * @param {string} postType The type of the parent post.
 * @param {number} postId   The id of the parent post.
 */


function* getAutosave(postType, postId) {
  yield _data.controls.resolveSelect(_name.STORE_NAME, 'getAutosaves', postType, postId);
}
/**
 * Retrieve the frontend template used for a given link.
 *
 * @param {string} link Link.
 */


function* __experimentalGetTemplateForLink(link) {
  // Ideally this should be using an apiFetch call
  // We could potentially do so by adding a "filter" to the `wp_template` end point.
  // Also it seems the returned object is not a regular REST API post type.
  let template;

  try {
    template = yield (0, _controls.regularFetch)((0, _url.addQueryArgs)(link, {
      '_wp-find-template': true
    }));
  } catch (e) {// For non-FSE themes, it is possible that this request returns an error.
  }

  if (!template) {
    return;
  }

  yield getEntityRecord('postType', 'wp_template', template.id);
  const record = yield _data.controls.select(_name.STORE_NAME, 'getEntityRecord', 'postType', 'wp_template', template.id);

  if (record) {
    yield (0, _actions.receiveEntityRecords)('postType', 'wp_template', [record], {
      'find-template': link
    });
  }
}

__experimentalGetTemplateForLink.shouldInvalidate = action => {
  return (action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS') && action.invalidateCache && action.kind === 'postType' && action.name === 'wp_template';
};
//# sourceMappingURL=resolvers.js.map