{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","query","path","users","getCurrentUser","currentUser","getEntityRecord","kind","name","key","entities","entity","lock","STORE_NAME","exclusive","undefined","_fields","DEFAULT_ENTITY_KEY","join","baseURL","baseURLParams","include","hasRecords","controls","select","record","error","getRawEntityRecord","getEditedEntityRecord","getEntityRecords","records","Object","values","map","split","forEach","field","hasOwnProperty","context","resolutionsArgs","filter","type","selectorName","args","shouldInvalidate","action","invalidateCache","getCurrentTheme","activeThemes","getThemeSupports","theme_supports","getEmbedPreview","url","embedProxyResponse","canUser","resource","id","methods","create","read","update","delete","method","Error","response","parse","allowHeader","headers","get","isAllowed","canUserEditEntityRecord","recordId","__unstable_rest_base","getAutosaves","postType","postId","rest_base","restBase","resolveSelect","autosaves","length","getAutosave","__experimentalGetTemplateForLink","link","template","e"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport { controls } from '@wordpress/data';\nimport { apiFetch } from '@wordpress/data-controls';\n/**\n * Internal dependencies\n */\nimport { regularFetch } from './controls';\nimport { STORE_NAME } from './name';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { ifNotResolved, getNormalizedCommaSeparable } from './utils';\nimport {\n\t__unstableAcquireStoreLock,\n\t__unstableReleaseStoreLock,\n} from './locks';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getAuthors( query ) {\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\tconst users = yield apiFetch( { path } );\n\tyield receiveUserQuery( path, users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getEntityRecord( kind, name, key = '', query ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, key ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query !== undefined && query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\t// Disable reason: While true that an early return could leave `path`\n\t\t// unused, it's important that path is derived using the query prior to\n\t\t// additional query modifications in the condition below, since those\n\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t// for how the request is made to the REST API.\n\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst path = addQueryArgs( entity.baseURL + '/' + key, {\n\t\t\t...entity.baseURLParams,\n\t\t\t...query,\n\t\t} );\n\n\t\tif ( query !== undefined ) {\n\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\tconst hasRecords = yield controls.select(\n\t\t\t\tSTORE_NAME,\n\t\t\t\t'hasEntityRecords',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\tquery\n\t\t\t);\n\t\t\tif ( hasRecords ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst record = yield apiFetch( { path } );\n\t\tyield receiveEntityRecords( kind, name, record, query );\n\t} catch ( error ) {\n\t\t// We need a way to handle and access REST API errors in state\n\t\t// Until then, catching the error ensures the resolver is marked as resolved.\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\tconst path = addQueryArgs( entity.baseURL, {\n\t\t\t...entity.baseURLParams,\n\t\t\t...query,\n\t\t} );\n\n\t\tlet records = Object.values( yield apiFetch( { path } ) );\n\t\t// If we request fields but the result doesn't contain the fields,\n\t\t// explicitely set these fields as \"undefined\"\n\t\t// that way we consider the query \"fullfilled\".\n\t\tif ( query._fields ) {\n\t\t\trecords = records.map( ( record ) => {\n\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn record;\n\t\t\t} );\n\t\t}\n\n\t\tyield receiveEntityRecords( kind, name, records, query );\n\t\t// When requesting all fields, the list of results can be used to\n\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\tconst key = entity.key || DEFAULT_ENTITY_KEY;\n\t\t\tconst resolutionsArgs = records\n\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\tyield {\n\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\targs: resolutionsArgs,\n\t\t\t};\n\t\t\tyield {\n\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\targs: resolutionsArgs,\n\t\t\t};\n\t\t}\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport function* canUserEditEntityRecord( kind, name, recordId ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst resource = entity.__unstable_rest_base;\n\tyield canUser( 'update', resource, recordId );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield controls.resolveSelect(\n\t\tSTORE_NAME,\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield controls.resolveSelect(\n\t\tSTORE_NAME,\n\t\t'getAutosaves',\n\t\tpostType,\n\t\tpostId\n\t);\n}\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport function* __experimentalGetTemplateForLink( link ) {\n\t// Ideally this should be using an apiFetch call\n\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t// Also it seems the returned object is not a regular REST API post type.\n\tlet template;\n\ttry {\n\t\ttemplate = yield regularFetch(\n\t\t\taddQueryArgs( link, {\n\t\t\t\t'_wp-find-template': true,\n\t\t\t} )\n\t\t);\n\t} catch ( e ) {\n\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t}\n\n\tif ( ! template ) {\n\t\treturn;\n\t}\n\n\tyield getEntityRecord( 'postType', 'wp_template', template.id );\n\tconst record = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getEntityRecord',\n\t\t'postType',\n\t\t'wp_template',\n\t\ttemplate.id\n\t);\n\n\tif ( record ) {\n\t\tyield receiveEntityRecords( 'postType', 'wp_template', [ record ], {\n\t\t\t'find-template': link,\n\t\t} );\n\t}\n}\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n"]}