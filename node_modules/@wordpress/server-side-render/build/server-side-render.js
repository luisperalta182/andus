"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rendererPath = rendererPath;
exports.default = ServerSideRender;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _lodash = require("lodash");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _url = require("@wordpress/url");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function rendererPath(block, attributes = null, urlQueryArgs = {}) {
  return (0, _url.addQueryArgs)(`/wp/v2/block-renderer/${block}`, {
    context: 'edit',
    ...(null !== attributes ? {
      attributes
    } : {}),
    ...urlQueryArgs
  });
}

function DefaultEmptyResponsePlaceholder({
  className
}) {
  return (0, _element.createElement)(_components.Placeholder, {
    className: className
  }, (0, _i18n.__)('Block rendered as empty.'));
}

function DefaultErrorResponsePlaceholder({
  response,
  className
}) {
  const errorMessage = (0, _i18n.sprintf)( // translators: %s: error message describing the problem
  (0, _i18n.__)('Error loading block: %s'), response.errorMsg);
  return (0, _element.createElement)(_components.Placeholder, {
    className: className
  }, errorMessage);
}

function DefaultLoadingResponsePlaceholder({
  className
}) {
  return (0, _element.createElement)(_components.Placeholder, {
    className: className
  }, (0, _element.createElement)(_components.Spinner, null));
}

function ServerSideRender(props) {
  const {
    attributes,
    block,
    className,
    httpMethod = 'GET',
    urlQueryArgs,
    EmptyResponsePlaceholder = DefaultEmptyResponsePlaceholder,
    ErrorResponsePlaceholder = DefaultErrorResponsePlaceholder,
    LoadingResponsePlaceholder = DefaultLoadingResponsePlaceholder
  } = props;
  const isMountedRef = (0, _element.useRef)(true);
  const fetchRequestRef = (0, _element.useRef)();
  const [response, setResponse] = (0, _element.useState)(null);
  const prevProps = (0, _compose.usePrevious)(props);

  function fetchData() {
    if (!isMountedRef.current) {
      return;
    }

    if (null !== response) {
      setResponse(null);
    }

    const sanitizedAttributes = attributes && (0, _blocks.__experimentalSanitizeBlockAttributes)(block, attributes); // If httpMethod is 'POST', send the attributes in the request body instead of the URL.
    // This allows sending a larger attributes object than in a GET request, where the attributes are in the URL.

    const isPostRequest = 'POST' === httpMethod;
    const urlAttributes = isPostRequest ? null : sanitizedAttributes !== null && sanitizedAttributes !== void 0 ? sanitizedAttributes : null;
    const path = rendererPath(block, urlAttributes, urlQueryArgs);
    const data = isPostRequest ? {
      attributes: sanitizedAttributes !== null && sanitizedAttributes !== void 0 ? sanitizedAttributes : null
    } : null; // Store the latest fetch request so that when we process it, we can
    // check if it is the current request, to avoid race conditions on slow networks.

    const fetchRequest = fetchRequestRef.current = (0, _apiFetch.default)({
      path,
      data,
      method: isPostRequest ? 'POST' : 'GET'
    }).then(fetchResponse => {
      if (isMountedRef.current && fetchRequest === fetchRequestRef.current && fetchResponse) {
        setResponse(fetchResponse.rendered);
      }
    }).catch(error => {
      if (isMountedRef.current && fetchRequest === fetchRequestRef.current) {
        setResponse({
          error: true,
          errorMsg: error.message
        });
      }
    });
    return fetchRequest;
  }

  const debouncedFetchData = (0, _compose.useDebounce)(fetchData, 500); // When the component unmounts, set isMountedRef to false. This will
  // let the async fetch callbacks know when to stop.

  (0, _element.useEffect)(() => () => {
    isMountedRef.current = false;
  }, []);
  (0, _element.useEffect)(() => {
    // Don't debounce the first fetch. This ensures that the first render
    // shows data as soon as possible
    if (prevProps === undefined) {
      fetchData();
    } else if (!(0, _lodash.isEqual)(prevProps, props)) {
      debouncedFetchData();
    }
  });

  if (response === '') {
    return (0, _element.createElement)(EmptyResponsePlaceholder, props);
  } else if (!response) {
    return (0, _element.createElement)(LoadingResponsePlaceholder, props);
  } else if (response.error) {
    return (0, _element.createElement)(ErrorResponsePlaceholder, (0, _extends2.default)({
      response: response
    }, props));
  }

  return (0, _element.createElement)(_element.RawHTML, {
    className: className
  }, response);
}
//# sourceMappingURL=server-side-render.js.map