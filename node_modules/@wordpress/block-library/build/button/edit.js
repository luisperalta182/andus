"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _keycodes = require("@wordpress/keycodes");

var _icons = require("@wordpress/icons");

var _blocks = require("@wordpress/blocks");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
const NEW_TAB_REL = 'noreferrer noopener';

function WidthPanel({
  selectedWidth,
  setAttributes
}) {
  function handleChange(newWidth) {
    // Check if we are toggling the width off
    const width = selectedWidth === newWidth ? undefined : newWidth; // Update attributes

    setAttributes({
      width
    });
  }

  return (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Width settings')
  }, (0, _element.createElement)(_components.ButtonGroup, {
    "aria-label": (0, _i18n.__)('Button width')
  }, [25, 50, 75, 100].map(widthValue => {
    return (0, _element.createElement)(_components.Button, {
      key: widthValue,
      isSmall: true,
      variant: widthValue === selectedWidth ? 'primary' : undefined,
      onClick: () => handleChange(widthValue)
    }, widthValue, "%");
  })));
}

function URLPicker({
  isSelected,
  url,
  setAttributes,
  opensInNewTab,
  onToggleOpenInNewTab,
  anchorRef
}) {
  const [isURLPickerOpen, setIsURLPickerOpen] = (0, _element.useState)(false);
  const urlIsSet = !!url;
  const urlIsSetandSelected = urlIsSet && isSelected;

  const openLinkControl = () => {
    setIsURLPickerOpen(true);
    return false; // prevents default behaviour for event
  };

  const unlinkButton = () => {
    setAttributes({
      url: undefined,
      linkTarget: undefined,
      rel: undefined
    });
    setIsURLPickerOpen(false);
  };

  const linkControl = (isURLPickerOpen || urlIsSetandSelected) && (0, _element.createElement)(_components.Popover, {
    position: "bottom center",
    onClose: () => setIsURLPickerOpen(false),
    anchorRef: anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current
  }, (0, _element.createElement)(_blockEditor.__experimentalLinkControl, {
    className: "wp-block-navigation-link__inline-link-input",
    value: {
      url,
      opensInNewTab
    },
    onChange: ({
      url: newURL = '',
      opensInNewTab: newOpensInNewTab
    }) => {
      setAttributes({
        url: newURL
      });

      if (opensInNewTab !== newOpensInNewTab) {
        onToggleOpenInNewTab(newOpensInNewTab);
      }
    }
  }));
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, !urlIsSet && (0, _element.createElement)(_components.ToolbarButton, {
    name: "link",
    icon: _icons.link,
    title: (0, _i18n.__)('Link'),
    shortcut: _keycodes.displayShortcut.primary('k'),
    onClick: openLinkControl
  }), urlIsSetandSelected && (0, _element.createElement)(_components.ToolbarButton, {
    name: "link",
    icon: _icons.linkOff,
    title: (0, _i18n.__)('Unlink'),
    shortcut: _keycodes.displayShortcut.primaryShift('k'),
    onClick: unlinkButton,
    isActive: true
  })), isSelected && (0, _element.createElement)(_components.KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: {
      [_keycodes.rawShortcut.primary('k')]: openLinkControl,
      [_keycodes.rawShortcut.primaryShift('k')]: unlinkButton
    }
  }), linkControl);
}

function ButtonEdit(props) {
  var _style$border;

  const {
    attributes,
    setAttributes,
    className,
    isSelected,
    onReplace,
    mergeBlocks
  } = props;
  const {
    linkTarget,
    placeholder,
    rel,
    style,
    text,
    url,
    width
  } = attributes;
  const onSetLinkRel = (0, _element.useCallback)(value => {
    setAttributes({
      rel: value
    });
  }, [setAttributes]);
  const onToggleOpenInNewTab = (0, _element.useCallback)(value => {
    const newLinkTarget = value ? '_blank' : undefined;
    let updatedRel = rel;

    if (newLinkTarget && !rel) {
      updatedRel = NEW_TAB_REL;
    } else if (!newLinkTarget && rel === NEW_TAB_REL) {
      updatedRel = undefined;
    }

    setAttributes({
      linkTarget: newLinkTarget,
      rel: updatedRel
    });
  }, [rel, setAttributes]);

  const setButtonText = newText => {
    // Remove anchor tags from button text content.
    setAttributes({
      text: newText.replace(/<\/?a[^>]*>/g, '')
    });
  };

  const borderProps = (0, _blockEditor.__experimentalUseBorderProps)(attributes);
  const colorProps = (0, _blockEditor.__experimentalUseColorProps)(attributes);
  const spacingProps = (0, _blockEditor.__experimentalGetSpacingClassesAndStyles)(attributes);
  const ref = (0, _element.useRef)();
  const blockProps = (0, _blockEditor.useBlockProps)({
    ref
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("div", (0, _extends2.default)({}, blockProps, {
    className: (0, _classnames.default)(blockProps.className, {
      [`has-custom-width wp-block-button__width-${width}`]: width,
      [`has-custom-font-size`]: blockProps.style.fontSize
    })
  }), (0, _element.createElement)(_blockEditor.RichText, {
    "aria-label": (0, _i18n.__)('Button text'),
    placeholder: placeholder || (0, _i18n.__)('Add textâ€¦'),
    value: text,
    onChange: value => setButtonText(value),
    withoutInteractiveFormatting: true,
    className: (0, _classnames.default)(className, 'wp-block-button__link', colorProps.className, borderProps.className, {
      // For backwards compatibility add style that isn't
      // provided via block support.
      'no-border-radius': (style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius) === 0
    }),
    style: { ...borderProps.style,
      ...colorProps.style,
      ...spacingProps.style
    },
    onSplit: value => (0, _blocks.createBlock)('core/button', { ...attributes,
      text: value
    }),
    onReplace: onReplace,
    onMerge: mergeBlocks,
    identifier: "text"
  })), (0, _element.createElement)(URLPicker, {
    url: url,
    setAttributes: setAttributes,
    isSelected: isSelected,
    opensInNewTab: linkTarget === '_blank',
    onToggleOpenInNewTab: onToggleOpenInNewTab,
    anchorRef: ref
  }), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(WidthPanel, {
    selectedWidth: width,
    setAttributes: setAttributes
  })), (0, _element.createElement)(_blockEditor.InspectorAdvancedControls, null, (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Link rel'),
    value: rel || '',
    onChange: onSetLinkRel
  })));
}

var _default = ButtonEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map