"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _blocks = require("@wordpress/blocks");

var _blob = require("@wordpress/blob");

var _shared = require("./shared");

var _constants = require("./constants");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const parseShortcodeIds = ids => {
  if (!ids) {
    return [];
  }

  return ids.split(',').map(id => parseInt(id, 10));
};

const transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/image'],
    transform: attributes => {
      // Init the align and size from the first item which may be either the placeholder or an image.
      let {
        align,
        sizeSlug
      } = attributes[0]; // Loop through all the images and check if they have the same align and size.

      align = (0, _lodash.every)(attributes, ['align', align]) ? align : undefined;
      sizeSlug = (0, _lodash.every)(attributes, ['sizeSlug', sizeSlug]) ? sizeSlug : undefined;
      const validImages = (0, _lodash.filter)(attributes, ({
        url
      }) => url);
      return (0, _blocks.createBlock)('core/gallery', {
        images: validImages.map(({
          id,
          url,
          alt,
          caption
        }) => ({
          id: (0, _lodash.toString)(id),
          url,
          alt,
          caption
        })),
        ids: validImages.map(({
          id
        }) => parseInt(id, 10)),
        align,
        sizeSlug
      });
    }
  }, {
    type: 'shortcode',
    tag: 'gallery',
    attributes: {
      images: {
        type: 'array',
        shortcode: ({
          named: {
            ids
          }
        }) => {
          return parseShortcodeIds(ids).map(id => ({
            id: (0, _lodash.toString)(id)
          }));
        }
      },
      ids: {
        type: 'array',
        shortcode: ({
          named: {
            ids
          }
        }) => {
          return parseShortcodeIds(ids);
        }
      },
      columns: {
        type: 'number',
        shortcode: ({
          named: {
            columns = '3'
          }
        }) => {
          return parseInt(columns, 10);
        }
      },
      linkTo: {
        type: 'string',
        shortcode: ({
          named: {
            link = _constants.LINK_DESTINATION_ATTACHMENT
          }
        }) => {
          return link;
        }
      }
    },

    isMatch({
      named
    }) {
      return undefined !== named.ids;
    }

  }, {
    // When created by drag and dropping multiple files on an insertion point
    type: 'files',

    isMatch(files) {
      return files.length !== 1 && (0, _lodash.every)(files, file => file.type.indexOf('image/') === 0);
    },

    transform(files) {
      const block = (0, _blocks.createBlock)('core/gallery', {
        images: files.map(file => (0, _shared.pickRelevantMediaFiles)({
          url: (0, _blob.createBlobURL)(file)
        }))
      });
      return block;
    }

  }],
  to: [{
    type: 'block',
    blocks: ['core/image'],
    transform: ({
      images,
      align,
      sizeSlug,
      ids
    }) => {
      if (images.length > 0) {
        return images.map(({
          url,
          alt,
          caption
        }, index) => (0, _blocks.createBlock)('core/image', {
          id: ids[index],
          url,
          alt,
          caption,
          align,
          sizeSlug
        }));
      }

      return (0, _blocks.createBlock)('core/image', {
        align
      });
    }
  }]
};
var _default = transforms;
exports.default = _default;
//# sourceMappingURL=transforms.js.map