"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

/**
 * WordPress dependencies
 */
const SCALE_OPTIONS = (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.__experimentalSegmentedControlOption, {
  value: "cover",
  label: (0, _i18n._x)('Cover', 'Scale option for Image dimension control')
}), (0, _element.createElement)(_components.__experimentalSegmentedControlOption, {
  value: "contain",
  label: (0, _i18n._x)('Contain', 'Scale option for Image dimension control')
}), (0, _element.createElement)(_components.__experimentalSegmentedControlOption, {
  value: "fill",
  label: (0, _i18n._x)('Stretch', 'Scale option for Image dimension control')
}));

const DimensionControls = ({
  attributes: {
    width,
    height,
    scale
  },
  setAttributes
}) => {
  const defaultUnits = ['px', '%', 'vw', 'em', 'rem'];
  const units = (0, _components.__experimentalUseCustomUnits)({
    availableUnits: (0, _blockEditor.useSetting)('spacing.units') || defaultUnits
  });

  const onDimensionChange = (dimension, nextValue) => {
    const parsedValue = parseFloat(nextValue);
    /**
     * If we have no value set and we change the unit,
     * we don't want to set the attribute, as it would
     * end up having the unit as value without any number.
     */

    if (isNaN(parsedValue) && nextValue) return;
    setAttributes({
      [dimension]: parsedValue < 0 ? '0' : nextValue
    });
  };

  const scaleLabel = (0, _i18n._x)('Scale', 'Image scaling options');
  return (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Dimensions')
  }, (0, _element.createElement)(_components.Flex, {
    justify: "space-between"
  }, (0, _element.createElement)(_components.FlexItem, null, (0, _element.createElement)(_components.__experimentalUnitControl, {
    label: (0, _i18n.__)('Height'),
    labelPosition: "top",
    value: height || '',
    onChange: nextHeight => {
      onDimensionChange('height', nextHeight);
    },
    units: units
  })), (0, _element.createElement)(_components.FlexItem, null, (0, _element.createElement)(_components.__experimentalUnitControl, {
    label: (0, _i18n.__)('Width'),
    labelPosition: "top",
    value: width || '',
    onChange: nextWidth => {
      onDimensionChange('width', nextWidth);
    },
    units: units
  }))), !!height && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.BaseControl, {
    "aria-label": scaleLabel,
    className: "block-library-post-featured-image-scale-controls"
  }, (0, _element.createElement)("div", null, (0, _element.createElement)(_components.BaseControl.VisualLabel, null, scaleLabel)), (0, _element.createElement)(_components.__experimentalSegmentedControl, {
    label: scaleLabel,
    value: scale,
    onChange: value => {
      setAttributes({
        scale: value
      });
    },
    isBlock: true
  }, SCALE_OPTIONS))));
};

var _default = DimensionControls;
exports.default = _default;
//# sourceMappingURL=dimension-controls.js.map