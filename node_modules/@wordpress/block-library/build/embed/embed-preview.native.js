"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _dedupe = _interopRequireDefault(require("classnames/dedupe"));

var _primitives = require("@wordpress/primitives");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _util = require("./util");

var _embedNoPreview = _interopRequireDefault(require("./embed-no-preview"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const EmbedPreview = ({
  className,
  clientId,
  icon,
  insertBlocksAfter,
  isSelected,
  label,
  onFocus,
  preview,
  previewable,
  type,
  url
}) => {
  const [isCaptionSelected, setIsCaptionSelected] = (0, _element.useState)(false);

  function accessibilityLabelCreator(caption) {
    return (0, _lodash.isEmpty)(caption) ?
    /* translators: accessibility text. Empty Embed caption. */
    (0, _i18n.__)('Embed caption. Empty') : (0, _i18n.sprintf)(
    /* translators: accessibility text. %s: Embed caption. */
    (0, _i18n.__)('Embed caption. %s'), caption);
  }

  function onEmbedPreviewPress() {
    setIsCaptionSelected(false);
  }

  function onFocusCaption() {
    if (onFocus) {
      onFocus();
    }

    if (!isCaptionSelected) {
      setIsCaptionSelected(true);
    }
  }

  const {
    provider_url: providerUrl
  } = preview;
  const html = 'photo' === type ? (0, _util.getPhotoHtml)(preview) : preview.html;
  const parsedHost = new URL(url).host.split('.');
  const parsedHostBaseUrl = parsedHost.splice(parsedHost.length - 2, parsedHost.length - 1).join('.');
  const iframeTitle = (0, _i18n.sprintf)( // translators: %s: host providing embed content e.g: www.youtube.com
  (0, _i18n.__)('Embedded content from %s'), parsedHostBaseUrl);
  const sandboxClassnames = (0, _dedupe.default)(type, className, 'wp-block-embed__wrapper');
  const embedWrapper =
  /* We should render here: <WpEmbedPreview html={ html } /> */
  'wp-embed' === type ? null : (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    onPress: () => {
      if (onFocus) {
        onFocus();
      }

      if (isCaptionSelected) {
        setIsCaptionSelected(false);
      }
    }
  }, (0, _element.createElement)(_primitives.View, {
    pointerEvents: "box-only"
  }, (0, _element.createElement)(_components.SandBox, {
    html: html,
    title: iframeTitle,
    type: sandboxClassnames,
    providerUrl: providerUrl,
    url: url
  }))));
  return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessible: !isSelected,
    onPress: onEmbedPreviewPress,
    disabled: !isSelected
  }, (0, _element.createElement)(_primitives.View, null, // eslint-disable-next-line no-undef
  __DEV__ && previewable ? embedWrapper : (0, _element.createElement)(_embedNoPreview.default, {
    label: label,
    icon: icon,
    isSelected: isSelected,
    onPress: () => setIsCaptionSelected(false)
  }), (0, _element.createElement)(_blockEditor.BlockCaption, {
    accessibilityLabelCreator: accessibilityLabelCreator,
    accessible: true,
    clientId: clientId,
    insertBlocksAfter: insertBlocksAfter,
    isSelected: isCaptionSelected,
    onFocus: onFocusCaption
  })));
};

var _default = (0, _element.memo)(EmbedPreview);

exports.default = _default;
//# sourceMappingURL=embed-preview.native.js.map