"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _reactNative = require("react-native");

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _styles = _interopRequireDefault(require("./styles.scss"));

var _gridicons = require("../../../components/src/mobile/gridicons");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const EmbedPlaceholder = ({
  icon,
  isSelected,
  label,
  onPress,
  cannotEmbed
}) => {
  const containerStyle = (0, _compose.usePreferredColorSchemeStyle)(_styles.default.embed__container, _styles.default['embed__container--dark']);
  const labelStyle = (0, _compose.usePreferredColorSchemeStyle)(_styles.default.embed__label, _styles.default['embed__label--dark']);
  const descriptionStyle = _styles.default.embed__description;
  const descriptionErrorStyle = _styles.default['embed__description--error'];
  const actionStyle = (0, _compose.usePreferredColorSchemeStyle)(_styles.default.embed__action, _styles.default['embed__action--dark']);
  const embedIconStyle = (0, _compose.usePreferredColorSchemeStyle)(_styles.default.embed__icon, _styles.default['embed__icon--dark']);
  const embedIconErrorStyle = _styles.default['embed__icon--error'];
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessibilityRole: 'button',
    accessibilityHint: (0, _i18n.__)('Double tap to add a link.'),
    onPress: onPress,
    disabled: !isSelected
  }, (0, _element.createElement)(_reactNative.View, {
    style: containerStyle
  }, cannotEmbed ? (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.Icon, {
    icon: _gridicons.noticeOutline,
    fill: embedIconErrorStyle.fill,
    style: embedIconErrorStyle
  }), (0, _element.createElement)(_reactNative.Text, {
    style: [descriptionStyle, descriptionErrorStyle]
  }, (0, _i18n.__)('Unable to embed media')), (0, _element.createElement)(_reactNative.Text, {
    style: actionStyle
  }, (0, _i18n.__)('EDIT LINK'))) : (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.Icon, {
    icon: icon,
    fill: embedIconStyle.fill
  }), (0, _element.createElement)(_reactNative.Text, {
    style: labelStyle
  }, label), (0, _element.createElement)(_reactNative.Text, {
    style: actionStyle
  }, (0, _i18n.__)('ADD LINK'))))));
};

var _default = EmbedPlaceholder;
exports.default = _default;
//# sourceMappingURL=embed-placeholder.native.js.map