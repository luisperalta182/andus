import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { InnerBlocks, useBlockProps, InspectorAdvancedControls, __experimentalUseInnerBlocksProps as useInnerBlocksProps, useSetting, store as blockEditorStore } from '@wordpress/block-editor';
import { SelectControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';

function GroupEdit({
  attributes,
  setAttributes,
  clientId
}) {
  const {
    hasInnerBlocks,
    themeSupportsLayout
  } = useSelect(select => {
    var _getSettings;

    const {
      getBlock,
      getSettings
    } = select(blockEditorStore);
    const block = getBlock(clientId);
    return {
      hasInnerBlocks: !!(block && block.innerBlocks.length),
      themeSupportsLayout: (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout
    };
  }, [clientId]);
  const defaultLayout = useSetting('layout') || {};
  const {
    tagName: TagName = 'div',
    templateLock,
    layout = {}
  } = attributes;
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const blockProps = useBlockProps();
  const innerBlocksProps = useInnerBlocksProps(themeSupportsLayout ? blockProps : {
    className: 'wp-block-group__inner-container'
  }, {
    templateLock,
    renderAppender: hasInnerBlocks ? undefined : InnerBlocks.ButtonBlockAppender,
    __experimentalLayout: themeSupportsLayout ? usedLayout : undefined
  });
  return createElement(Fragment, null, createElement(InspectorAdvancedControls, null, createElement(SelectControl, {
    label: __('HTML element'),
    options: [{
      label: __('Default (<div>)'),
      value: 'div'
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }],
    value: TagName,
    onChange: value => setAttributes({
      tagName: value
    })
  })), themeSupportsLayout && createElement(TagName, innerBlocksProps), !themeSupportsLayout && createElement(TagName, blockProps, createElement("div", innerBlocksProps)));
}

export default GroupEdit;
//# sourceMappingURL=edit.js.map