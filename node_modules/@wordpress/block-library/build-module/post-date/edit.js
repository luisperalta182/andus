import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useEntityProp } from '@wordpress/core-data';
import { useState } from '@wordpress/element';
import { __experimentalGetSettings, dateI18n } from '@wordpress/date';
import { AlignmentControl, BlockControls, InspectorControls, useBlockProps } from '@wordpress/block-editor';
import { ToolbarButton, ToggleControl, Popover, DateTimePicker, PanelBody, CustomSelectControl } from '@wordpress/components';
import { __, sprintf } from '@wordpress/i18n';
import { edit } from '@wordpress/icons';
export default function PostDateEdit({
  attributes: {
    textAlign,
    format,
    isLink
  },
  context: {
    postId,
    postType,
    queryId
  },
  setAttributes
}) {
  const isDescendentOfQueryLoop = !!queryId;
  const [siteFormat] = useEntityProp('root', 'site', 'date_format');
  const [date, setDate] = useEntityProp('postType', postType, 'date', postId);
  const [isPickerOpen, setIsPickerOpen] = useState(false);

  const settings = __experimentalGetSettings(); // To know if the current time format is a 12 hour time, look for "a".
  // Also make sure this "a" is not escaped by a "/".


  const is12Hour = /a(?!\\)/i.test(settings.formats.time.toLowerCase() // Test only for the lower case "a".
  .replace(/\\\\/g, '') // Replace "//" with empty strings.
  .split('').reverse().join('') // Reverse the string and test for "a" not followed by a slash.
  );
  const formatOptions = Object.values(settings.formats).map(formatOption => ({
    key: formatOption,
    name: dateI18n(formatOption, date)
  }));
  const resolvedFormat = format || siteFormat || settings.formats.date;
  const blockProps = useBlockProps({
    className: classnames({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  let postDate = date ? createElement("time", {
    dateTime: dateI18n('c', date)
  }, dateI18n(resolvedFormat, date), isPickerOpen && createElement(Popover, {
    onClose: setIsPickerOpen.bind(null, false)
  }, createElement(DateTimePicker, {
    currentDate: date,
    onChange: setDate,
    is12Hour: is12Hour
  }))) : __('No Date');

  if (isLink && date) {
    postDate = createElement("a", {
      href: "#post-date-pseudo-link",
      onClick: event => event.preventDefault()
    }, postDate);
  }

  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block"
  }, createElement(AlignmentControl, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  }), date && !isDescendentOfQueryLoop && createElement(ToolbarButton, {
    icon: edit,
    title: __('Change Date'),
    onClick: () => setIsPickerOpen(_isPickerOpen => !_isPickerOpen)
  })), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Format settings')
  }, createElement(CustomSelectControl, {
    hideLabelFromVision: true,
    label: __('Date Format'),
    options: formatOptions,
    onChange: ({
      selectedItem
    }) => setAttributes({
      format: selectedItem.key
    }),
    value: formatOptions.find(option => option.key === resolvedFormat)
  })), createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(ToggleControl, {
    label: sprintf( // translators: %s: Name of the post type e.g: "post".
    __('Link to %s'), postType),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }))), createElement("div", blockProps, postDate));
}
//# sourceMappingURL=edit.js.map