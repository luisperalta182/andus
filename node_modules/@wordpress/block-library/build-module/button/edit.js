import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { useCallback, useState, useRef } from '@wordpress/element';
import { Button, ButtonGroup, KeyboardShortcuts, PanelBody, TextControl, ToolbarButton, Popover } from '@wordpress/components';
import { BlockControls, InspectorControls, InspectorAdvancedControls, RichText, useBlockProps, __experimentalUseBorderProps as useBorderProps, __experimentalUseColorProps as useColorProps, __experimentalGetSpacingClassesAndStyles as useSpacingProps, __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';
import { rawShortcut, displayShortcut } from '@wordpress/keycodes';
import { link, linkOff } from '@wordpress/icons';
import { createBlock } from '@wordpress/blocks';
const NEW_TAB_REL = 'noreferrer noopener';

function WidthPanel({
  selectedWidth,
  setAttributes
}) {
  function handleChange(newWidth) {
    // Check if we are toggling the width off
    const width = selectedWidth === newWidth ? undefined : newWidth; // Update attributes

    setAttributes({
      width
    });
  }

  return createElement(PanelBody, {
    title: __('Width settings')
  }, createElement(ButtonGroup, {
    "aria-label": __('Button width')
  }, [25, 50, 75, 100].map(widthValue => {
    return createElement(Button, {
      key: widthValue,
      isSmall: true,
      variant: widthValue === selectedWidth ? 'primary' : undefined,
      onClick: () => handleChange(widthValue)
    }, widthValue, "%");
  })));
}

function URLPicker({
  isSelected,
  url,
  setAttributes,
  opensInNewTab,
  onToggleOpenInNewTab,
  anchorRef
}) {
  const [isURLPickerOpen, setIsURLPickerOpen] = useState(false);
  const urlIsSet = !!url;
  const urlIsSetandSelected = urlIsSet && isSelected;

  const openLinkControl = () => {
    setIsURLPickerOpen(true);
    return false; // prevents default behaviour for event
  };

  const unlinkButton = () => {
    setAttributes({
      url: undefined,
      linkTarget: undefined,
      rel: undefined
    });
    setIsURLPickerOpen(false);
  };

  const linkControl = (isURLPickerOpen || urlIsSetandSelected) && createElement(Popover, {
    position: "bottom center",
    onClose: () => setIsURLPickerOpen(false),
    anchorRef: anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current
  }, createElement(LinkControl, {
    className: "wp-block-navigation-link__inline-link-input",
    value: {
      url,
      opensInNewTab
    },
    onChange: ({
      url: newURL = '',
      opensInNewTab: newOpensInNewTab
    }) => {
      setAttributes({
        url: newURL
      });

      if (opensInNewTab !== newOpensInNewTab) {
        onToggleOpenInNewTab(newOpensInNewTab);
      }
    }
  }));
  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block"
  }, !urlIsSet && createElement(ToolbarButton, {
    name: "link",
    icon: link,
    title: __('Link'),
    shortcut: displayShortcut.primary('k'),
    onClick: openLinkControl
  }), urlIsSetandSelected && createElement(ToolbarButton, {
    name: "link",
    icon: linkOff,
    title: __('Unlink'),
    shortcut: displayShortcut.primaryShift('k'),
    onClick: unlinkButton,
    isActive: true
  })), isSelected && createElement(KeyboardShortcuts, {
    bindGlobal: true,
    shortcuts: {
      [rawShortcut.primary('k')]: openLinkControl,
      [rawShortcut.primaryShift('k')]: unlinkButton
    }
  }), linkControl);
}

function ButtonEdit(props) {
  var _style$border;

  const {
    attributes,
    setAttributes,
    className,
    isSelected,
    onReplace,
    mergeBlocks
  } = props;
  const {
    linkTarget,
    placeholder,
    rel,
    style,
    text,
    url,
    width
  } = attributes;
  const onSetLinkRel = useCallback(value => {
    setAttributes({
      rel: value
    });
  }, [setAttributes]);
  const onToggleOpenInNewTab = useCallback(value => {
    const newLinkTarget = value ? '_blank' : undefined;
    let updatedRel = rel;

    if (newLinkTarget && !rel) {
      updatedRel = NEW_TAB_REL;
    } else if (!newLinkTarget && rel === NEW_TAB_REL) {
      updatedRel = undefined;
    }

    setAttributes({
      linkTarget: newLinkTarget,
      rel: updatedRel
    });
  }, [rel, setAttributes]);

  const setButtonText = newText => {
    // Remove anchor tags from button text content.
    setAttributes({
      text: newText.replace(/<\/?a[^>]*>/g, '')
    });
  };

  const borderProps = useBorderProps(attributes);
  const colorProps = useColorProps(attributes);
  const spacingProps = useSpacingProps(attributes);
  const ref = useRef();
  const blockProps = useBlockProps({
    ref
  });
  return createElement(Fragment, null, createElement("div", _extends({}, blockProps, {
    className: classnames(blockProps.className, {
      [`has-custom-width wp-block-button__width-${width}`]: width,
      [`has-custom-font-size`]: blockProps.style.fontSize
    })
  }), createElement(RichText, {
    "aria-label": __('Button text'),
    placeholder: placeholder || __('Add textâ€¦'),
    value: text,
    onChange: value => setButtonText(value),
    withoutInteractiveFormatting: true,
    className: classnames(className, 'wp-block-button__link', colorProps.className, borderProps.className, {
      // For backwards compatibility add style that isn't
      // provided via block support.
      'no-border-radius': (style === null || style === void 0 ? void 0 : (_style$border = style.border) === null || _style$border === void 0 ? void 0 : _style$border.radius) === 0
    }),
    style: { ...borderProps.style,
      ...colorProps.style,
      ...spacingProps.style
    },
    onSplit: value => createBlock('core/button', { ...attributes,
      text: value
    }),
    onReplace: onReplace,
    onMerge: mergeBlocks,
    identifier: "text"
  })), createElement(URLPicker, {
    url: url,
    setAttributes: setAttributes,
    isSelected: isSelected,
    opensInNewTab: linkTarget === '_blank',
    onToggleOpenInNewTab: onToggleOpenInNewTab,
    anchorRef: ref
  }), createElement(InspectorControls, null, createElement(WidthPanel, {
    selectedWidth: width,
    setAttributes: setAttributes
  })), createElement(InspectorAdvancedControls, null, createElement(TextControl, {
    label: __('Link rel'),
    value: rel || '',
    onChange: onSetLinkRel
  })));
}

export default ButtonEdit;
//# sourceMappingURL=edit.js.map